name: Build and Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual triggering

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/demo-app

jobs:
  security-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Validate workflow environment
      run: |
        echo "::group::Workflow Environment Validation"
        echo "üîß GitHub Actor: ${{ github.actor }}"
        echo "üîß GitHub Event: ${{ github.event_name }}"
        echo "üîß GitHub Ref: ${{ github.ref }}"
        echo "üîß Runner OS: ${{ runner.os }}"
        echo "üîß Workspace: ${{ github.workspace }}"
        
        # Check required environment variables
        echo "üîç Checking environment variables..."
        echo "GITHUB_TOKEN: ${GITHUB_TOKEN:+SET}" 
        echo "GITHUB_WORKSPACE: ${GITHUB_WORKSPACE:-UNSET}"
        
        # Check basic commands
        echo "üîç Checking basic commands..."
        which git || echo "‚ùå Git not found"
        which npm || echo "‚ùå npm not found" 
        which node || echo "‚ùå Node.js not found"
        
        echo "‚úÖ Environment validation complete"
        echo "::endgroup::"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Check if demo-app directory exists
      id: check-demo-app
      run: |
        echo "::group::Environment Information"
        echo "Current working directory: $(pwd)"
        echo "Git status:"
        git status --porcelain || echo "Git status failed"
        echo "Repository root contents:"
        ls -la
        echo "::endgroup::"
        
        echo "::group::Demo App Directory Check"
        if [ ! -d "./demo-app" ]; then 
          echo "::warning::Directory ./demo-app does not exist, skipping security scan steps"
          echo "demo_app_exists=false" >> $GITHUB_OUTPUT
          echo "This may be expected if demo-app was not part of the triggering changes"
          exit 0
        fi
        
        echo "‚úÖ Demo app directory exists"
        echo "Demo app contents:"
        ls -la ./demo-app/
        
        echo "::group::Required Files Check"
        # Check for required files with detailed output
        if [ -f "./demo-app/package.json" ]; then
          echo "‚úÖ package.json exists"
          echo "package.json size: $(wc -c < ./demo-app/package.json) bytes"
        else
          echo "‚ùå package.json missing - creating basic package.json"
          mkdir -p demo-app
          echo '{"name":"gitops-demo-app","version":"1.0.0","dependencies":{"express":"^5.1.0"}}' > demo-app/package.json
        fi
        
        if [ -f "./demo-app/package-lock.json" ]; then
          echo "‚úÖ package-lock.json exists"
          echo "package-lock.json size: $(wc -c < ./demo-app/package-lock.json) bytes"
        else
          echo "‚ùå package-lock.json missing - will be generated in next step"
        fi
        
        if [ -f "./demo-app/src/app.js" ]; then
          echo "‚úÖ src/app.js exists"
        else
          echo "‚ùå src/app.js missing"
        fi
        
        if [ -f "./demo-app/Dockerfile" ]; then
          echo "‚úÖ Dockerfile exists"
        else
          echo "‚ùå Dockerfile missing"
        fi
        echo "::endgroup::"
        
        echo "demo_app_exists=true" >> $GITHUB_OUTPUT
        echo "::endgroup::"
    
    - name: Setup Node.js
      if: steps.check-demo-app.outputs.demo_app_exists == 'true'
      uses: actions/setup-node@v4
      with:
        node-version: '24'
        cache: 'npm'
        cache-dependency-path: demo-app/package-lock.json
    
    - name: Generate package-lock.json if missing
      if: steps.check-demo-app.outputs.demo_app_exists == 'true'
      run: |
        cd demo-app
        echo "::group::Package Lock Generation"
        if [ ! -f package-lock.json ]; then
          echo "üì¶ package-lock.json not found, generating..."
          npm install --package-lock-only
          echo "‚úÖ package-lock.json generated"
        else
          echo "‚úÖ package-lock.json already exists"
        fi
        echo "::endgroup::"

    - name: Install dependencies
      if: steps.check-demo-app.outputs.demo_app_exists == 'true'
      run: |
        cd demo-app
        echo "::group::Dependency Installation"
        echo "üì¶ Attempting npm ci..."
        
        # Try npm ci first
        if npm ci; then
          echo "‚úÖ npm ci succeeded"
        else
          echo "‚ùå npm ci failed, trying alternative approaches..."
          
          # Check if package-lock.json exists and is valid
          if [ -f package-lock.json ]; then
            echo "üì¶ package-lock.json exists, checking integrity..."
            if npm ls > /dev/null 2>&1; then
              echo "üì¶ Dependencies seem fine, trying npm install --force..."
              npm install --force
            else
              echo "üì¶ Dependencies corrupted, regenerating package-lock.json..."
              rm -f package-lock.json
              npm install
            fi
          else
            echo "üì¶ No package-lock.json, running npm install..."
            npm install
          fi
        fi
        
        echo "üìã Final dependency check:"
        npm ls --depth=0 || echo "Some dependency issues remain but continuing..."
        echo "::endgroup::"
    
    - name: Run npm audit
      if: steps.check-demo-app.outputs.demo_app_exists == 'true'
      run: |
        cd demo-app
        echo "::group::Security Audit"
        echo "üîç Running npm audit..."
        
        # Run audit and capture exit code
        set +e  # Don't exit on error
        npm audit --audit-level=high
        audit_exit_code=$?
        set -e  # Re-enable exit on error
        
        case $audit_exit_code in
          0)
            echo "‚úÖ No high-severity vulnerabilities found"
            ;;
          1)
            echo "‚ö†Ô∏è  High-severity vulnerabilities found, but continuing with workflow"
            echo "üìã Running npm audit fix if possible..."
            npm audit fix --dry-run || echo "Auto-fix not available"
            ;;
          *)
            echo "‚ùå npm audit failed with exit code: $audit_exit_code"
            echo "üîß This might be due to connectivity issues or npm registry problems"
            echo "üìã Continuing with workflow as this is not a blocking issue for security scanning"
            ;;
        esac
        echo "::endgroup::"
      continue-on-error: true
    
    - name: Run Trivy vulnerability scanner
      if: steps.check-demo-app.outputs.demo_app_exists == 'true'
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: './demo-app'
        format: 'sarif'
        output: 'trivy-results.sarif'
      continue-on-error: true
    
    - name: Check Trivy results
      run: |
        if [ "${{ steps.check-demo-app.outputs.demo_app_exists }}" == "true" ]; then
          if [ -f "trivy-results.sarif" ]; then
            echo "Trivy scan completed successfully"
            echo "SARIF file size: $(wc -c < trivy-results.sarif) bytes"
            # Validate SARIF file is not empty and contains valid JSON
            if [ -s "trivy-results.sarif" ]; then
              echo "SARIF file contains data"
            else
              echo "SARIF file is empty, creating minimal valid SARIF"
              echo '{"version":"2.1.0","$schema":"https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json","runs":[{"tool":{"driver":{"name":"trivy","version":"0.0.0"}},"results":[]}]}' > trivy-results.sarif
            fi
          else
            echo "Trivy scan did not generate results, creating empty SARIF file"
            echo '{"version":"2.1.0","$schema":"https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json","runs":[{"tool":{"driver":{"name":"trivy","version":"0.0.0"}},"results":[]}]}' > trivy-results.sarif
          fi
        else
          echo "Demo app directory not found, creating empty SARIF file for security scan step"
          echo '{"version":"2.1.0","$schema":"https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json","runs":[{"tool":{"driver":{"name":"trivy","version":"0.0.0"}},"results":[]}]}' > trivy-results.sarif
        fi
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  build:
    needs: security-scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: ./demo-app
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

    - name: Run Trivy vulnerability scanner on Docker image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        format: 'sarif'
        output: 'docker-trivy-results.sarif'
      continue-on-error: true

    - name: Check Docker Trivy results
      run: |
        if [ -f "docker-trivy-results.sarif" ]; then
          echo "Docker Trivy scan completed successfully"
          echo "SARIF file size: $(wc -c < docker-trivy-results.sarif) bytes"
        else
          echo "Docker Trivy scan did not generate results, creating empty SARIF file"
          echo '{"version":"2.1.0","$schema":"https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json","runs":[{"tool":{"driver":{"name":"trivy","version":"0.0.0"}},"results":[]}]}' > docker-trivy-results.sarif
        fi

    - name: Upload Docker Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'docker-trivy-results.sarif'

  update-manifests:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: write
      packages: read
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Update image with digest in deployment
      run: |
        # Get the image digest from the built and pushed image
        IMAGE_DIGEST=$(docker inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main-${{ github.sha }} --format='{{index .RepoDigests 0}}' 2>/dev/null)
        
        if [ -z "$IMAGE_DIGEST" ]; then
          # If no repo digest available, use the image ID as digest
          IMAGE_ID=$(docker inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main-${{ github.sha }} --format='{{.Id}}' | cut -d: -f2)
          IMAGE_DIGEST="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@sha256:${IMAGE_ID}"
        fi
        
        echo "Updating deployment with image digest: ${IMAGE_DIGEST}"
        
        # Update deployment with image digest
        sed -i "s|image: gitops-demo-app@sha256:.*|image: ${IMAGE_DIGEST}|g" apps/demo-app/deployment.yaml
        
    - name: Commit and push changes
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git config --local url."https://github.com/".insteadOf "git@github.com:"
        git config --local url."https://${GITHUB_TOKEN}@github.com/".insteadOf "https://github.com/"
        
        git add apps/demo-app/deployment.yaml
        if git diff --staged --quiet; then
          echo "No changes to commit"
          exit 0
        fi
        
        git commit -m "Update demo-app image to main-${{ github.sha }}"
        git push origin HEAD:main